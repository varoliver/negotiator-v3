# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.query_v3 import QueryV3  # noqa: F401,E501
from swagger_server.models.request_create_v3 import RequestCreateV3  # noqa: F401,E501
from swagger_server import util


class RequestResponseV3(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, title: str=None, description: str=None, project_description: str=None, ethics_vote: str=None, is_test: bool=None, queries: List[QueryV3]=None, project: int=None, id: int=None):  # noqa: E501
        """RequestResponseV3 - a model defined in Swagger

        :param title: The title of this RequestResponseV3.  # noqa: E501
        :type title: str
        :param description: The description of this RequestResponseV3.  # noqa: E501
        :type description: str
        :param project_description: The project_description of this RequestResponseV3.  # noqa: E501
        :type project_description: str
        :param ethics_vote: The ethics_vote of this RequestResponseV3.  # noqa: E501
        :type ethics_vote: str
        :param is_test: The is_test of this RequestResponseV3.  # noqa: E501
        :type is_test: bool
        :param queries: The queries of this RequestResponseV3.  # noqa: E501
        :type queries: List[QueryV3]
        :param project: The project of this RequestResponseV3.  # noqa: E501
        :type project: int
        :param id: The id of this RequestResponseV3.  # noqa: E501
        :type id: int
        """
        self.swagger_types = {
            'title': str,
            'description': str,
            'project_description': str,
            'ethics_vote': str,
            'is_test': bool,
            'queries': List[QueryV3],
            'project': int,
            'id': int
        }

        self.attribute_map = {
            'title': 'title',
            'description': 'description',
            'project_description': 'projectDescription',
            'ethics_vote': 'ethicsVote',
            'is_test': 'isTest',
            'queries': 'queries',
            'project': 'project',
            'id': 'id'
        }
        self._title = title
        self._description = description
        self._project_description = project_description
        self._ethics_vote = ethics_vote
        self._is_test = is_test
        self._queries = queries
        self._project = project
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'RequestResponseV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestResponseV3 of this RequestResponseV3.  # noqa: E501
        :rtype: RequestResponseV3
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self) -> str:
        """Gets the title of this RequestResponseV3.


        :return: The title of this RequestResponseV3.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this RequestResponseV3.


        :param title: The title of this RequestResponseV3.
        :type title: str
        """

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this RequestResponseV3.


        :return: The description of this RequestResponseV3.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this RequestResponseV3.


        :param description: The description of this RequestResponseV3.
        :type description: str
        """

        self._description = description

    @property
    def project_description(self) -> str:
        """Gets the project_description of this RequestResponseV3.


        :return: The project_description of this RequestResponseV3.
        :rtype: str
        """
        return self._project_description

    @project_description.setter
    def project_description(self, project_description: str):
        """Sets the project_description of this RequestResponseV3.


        :param project_description: The project_description of this RequestResponseV3.
        :type project_description: str
        """

        self._project_description = project_description

    @property
    def ethics_vote(self) -> str:
        """Gets the ethics_vote of this RequestResponseV3.


        :return: The ethics_vote of this RequestResponseV3.
        :rtype: str
        """
        return self._ethics_vote

    @ethics_vote.setter
    def ethics_vote(self, ethics_vote: str):
        """Sets the ethics_vote of this RequestResponseV3.


        :param ethics_vote: The ethics_vote of this RequestResponseV3.
        :type ethics_vote: str
        """

        self._ethics_vote = ethics_vote

    @property
    def is_test(self) -> bool:
        """Gets the is_test of this RequestResponseV3.


        :return: The is_test of this RequestResponseV3.
        :rtype: bool
        """
        return self._is_test

    @is_test.setter
    def is_test(self, is_test: bool):
        """Sets the is_test of this RequestResponseV3.


        :param is_test: The is_test of this RequestResponseV3.
        :type is_test: bool
        """

        self._is_test = is_test

    @property
    def queries(self) -> List[QueryV3]:
        """Gets the queries of this RequestResponseV3.


        :return: The queries of this RequestResponseV3.
        :rtype: List[QueryV3]
        """
        return self._queries

    @queries.setter
    def queries(self, queries: List[QueryV3]):
        """Sets the queries of this RequestResponseV3.


        :param queries: The queries of this RequestResponseV3.
        :type queries: List[QueryV3]
        """

        self._queries = queries

    @property
    def project(self) -> int:
        """Gets the project of this RequestResponseV3.


        :return: The project of this RequestResponseV3.
        :rtype: int
        """
        return self._project

    @project.setter
    def project(self, project: int):
        """Sets the project of this RequestResponseV3.


        :param project: The project of this RequestResponseV3.
        :type project: int
        """

        self._project = project

    @property
    def id(self) -> int:
        """Gets the id of this RequestResponseV3.

        Id of the generated request  # noqa: E501

        :return: The id of this RequestResponseV3.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this RequestResponseV3.

        Id of the generated request  # noqa: E501

        :param id: The id of this RequestResponseV3.
        :type id: int
        """

        self._id = id
