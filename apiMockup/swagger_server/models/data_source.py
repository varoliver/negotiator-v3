# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.biobank import Biobank  # noqa: F401,E501
from swagger_server import util


class DataSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, url: str=None, description: str=None, biobanks: List[Biobank]=None):  # noqa: E501
        """DataSource - a model defined in Swagger

        :param id: The id of this DataSource.  # noqa: E501
        :type id: int
        :param name: The name of this DataSource.  # noqa: E501
        :type name: str
        :param url: The url of this DataSource.  # noqa: E501
        :type url: str
        :param description: The description of this DataSource.  # noqa: E501
        :type description: str
        :param biobanks: The biobanks of this DataSource.  # noqa: E501
        :type biobanks: List[Biobank]
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'url': str,
            'description': str,
            'biobanks': List[Biobank]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'url': 'url',
            'description': 'description',
            'biobanks': 'biobanks'
        }
        self._id = id
        self._name = name
        self._url = url
        self._description = description
        self._biobanks = biobanks

    @classmethod
    def from_dict(cls, dikt) -> 'DataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataSource of this DataSource.  # noqa: E501
        :rtype: DataSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this DataSource.

        ID of the data source in the negotiator  # noqa: E501

        :return: The id of this DataSource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this DataSource.

        ID of the data source in the negotiator  # noqa: E501

        :param id: The id of this DataSource.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this DataSource.

        Name of the DataSource  # noqa: E501

        :return: The name of this DataSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DataSource.

        Name of the DataSource  # noqa: E501

        :param name: The name of this DataSource.
        :type name: str
        """

        self._name = name

    @property
    def url(self) -> str:
        """Gets the url of this DataSource.

        URL of the DataSource  # noqa: E501

        :return: The url of this DataSource.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this DataSource.

        URL of the DataSource  # noqa: E501

        :param url: The url of this DataSource.
        :type url: str
        """

        self._url = url

    @property
    def description(self) -> str:
        """Gets the description of this DataSource.

        Description of the DataSource  # noqa: E501

        :return: The description of this DataSource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this DataSource.

        Description of the DataSource  # noqa: E501

        :param description: The description of this DataSource.
        :type description: str
        """

        self._description = description

    @property
    def biobanks(self) -> List[Biobank]:
        """Gets the biobanks of this DataSource.


        :return: The biobanks of this DataSource.
        :rtype: List[Biobank]
        """
        return self._biobanks

    @biobanks.setter
    def biobanks(self, biobanks: List[Biobank]):
        """Sets the biobanks of this DataSource.


        :param biobanks: The biobanks of this DataSource.
        :type biobanks: List[Biobank]
        """

        self._biobanks = biobanks
