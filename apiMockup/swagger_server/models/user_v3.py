# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserV3(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, auth_subject: str=None, auth_name: str=None, auth_email: str=None, organization: str=None, is_admin: bool=None):  # noqa: E501
        """UserV3 - a model defined in Swagger

        :param id: The id of this UserV3.  # noqa: E501
        :type id: int
        :param auth_subject: The auth_subject of this UserV3.  # noqa: E501
        :type auth_subject: str
        :param auth_name: The auth_name of this UserV3.  # noqa: E501
        :type auth_name: str
        :param auth_email: The auth_email of this UserV3.  # noqa: E501
        :type auth_email: str
        :param organization: The organization of this UserV3.  # noqa: E501
        :type organization: str
        :param is_admin: The is_admin of this UserV3.  # noqa: E501
        :type is_admin: bool
        """
        self.swagger_types = {
            'id': int,
            'auth_subject': str,
            'auth_name': str,
            'auth_email': str,
            'organization': str,
            'is_admin': bool
        }

        self.attribute_map = {
            'id': 'id',
            'auth_subject': 'auth_subject',
            'auth_name': 'auth_name',
            'auth_email': 'auth_email',
            'organization': 'organization',
            'is_admin': 'is_admin'
        }
        self._id = id
        self._auth_subject = auth_subject
        self._auth_name = auth_name
        self._auth_email = auth_email
        self._organization = organization
        self._is_admin = is_admin

    @classmethod
    def from_dict(cls, dikt) -> 'UserV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserV3 of this UserV3.  # noqa: E501
        :rtype: UserV3
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this UserV3.

        the id of the user  # noqa: E501

        :return: The id of this UserV3.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this UserV3.

        the id of the user  # noqa: E501

        :param id: The id of this UserV3.
        :type id: int
        """

        self._id = id

    @property
    def auth_subject(self) -> str:
        """Gets the auth_subject of this UserV3.


        :return: The auth_subject of this UserV3.
        :rtype: str
        """
        return self._auth_subject

    @auth_subject.setter
    def auth_subject(self, auth_subject: str):
        """Sets the auth_subject of this UserV3.


        :param auth_subject: The auth_subject of this UserV3.
        :type auth_subject: str
        """

        self._auth_subject = auth_subject

    @property
    def auth_name(self) -> str:
        """Gets the auth_name of this UserV3.

        user name  # noqa: E501

        :return: The auth_name of this UserV3.
        :rtype: str
        """
        return self._auth_name

    @auth_name.setter
    def auth_name(self, auth_name: str):
        """Sets the auth_name of this UserV3.

        user name  # noqa: E501

        :param auth_name: The auth_name of this UserV3.
        :type auth_name: str
        """

        self._auth_name = auth_name

    @property
    def auth_email(self) -> str:
        """Gets the auth_email of this UserV3.


        :return: The auth_email of this UserV3.
        :rtype: str
        """
        return self._auth_email

    @auth_email.setter
    def auth_email(self, auth_email: str):
        """Sets the auth_email of this UserV3.


        :param auth_email: The auth_email of this UserV3.
        :type auth_email: str
        """

        self._auth_email = auth_email

    @property
    def organization(self) -> str:
        """Gets the organization of this UserV3.


        :return: The organization of this UserV3.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization: str):
        """Sets the organization of this UserV3.


        :param organization: The organization of this UserV3.
        :type organization: str
        """

        self._organization = organization

    @property
    def is_admin(self) -> bool:
        """Gets the is_admin of this UserV3.


        :return: The is_admin of this UserV3.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin: bool):
        """Sets the is_admin of this UserV3.


        :param is_admin: The is_admin of this UserV3.
        :type is_admin: bool
        """

        self._is_admin = is_admin
