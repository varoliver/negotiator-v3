# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.query_collections import QueryCollections  # noqa: F401,E501
from swagger_server.models.request_query import RequestQuery  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class Request(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, request_id: int=None, title: str=None, project_description: str=None, request_description: str=None, ethics_vote: str=None, test_request: bool=None, creation_time: str=None, collections: List[QueryCollections]=None, query: List[RequestQuery]=None):  # noqa: E501
        """Request - a model defined in Swagger

        :param request_id: The request_id of this Request.  # noqa: E501
        :type request_id: int
        :param title: The title of this Request.  # noqa: E501
        :type title: str
        :param project_description: The project_description of this Request.  # noqa: E501
        :type project_description: str
        :param request_description: The request_description of this Request.  # noqa: E501
        :type request_description: str
        :param ethics_vote: The ethics_vote of this Request.  # noqa: E501
        :type ethics_vote: str
        :param test_request: The test_request of this Request.  # noqa: E501
        :type test_request: bool
        :param creation_time: The creation_time of this Request.  # noqa: E501
        :type creation_time: str
        :param collections: The collections of this Request.  # noqa: E501
        :type collections: List[QueryCollections]
        :param query: The query of this Request.  # noqa: E501
        :type query: List[RequestQuery]
        """
        self.swagger_types = {
            'request_id': int,
            'title': str,
            'project_description': str,
            'request_description': str,
            'ethics_vote': str,
            'test_request': bool,
            'creation_time': str,
            'collections': List[QueryCollections],
            'query': List[RequestQuery]
        }

        self.attribute_map = {
            'request_id': 'requestId',
            'title': 'title',
            'project_description': 'projectDescription',
            'request_description': 'requestDescription',
            'ethics_vote': 'ethicsVote',
            'test_request': 'testRequest',
            'creation_time': 'creationTime',
            'collections': 'collections',
            'query': 'query'
        }
        self._request_id = request_id
        self._title = title
        self._project_description = project_description
        self._request_description = request_description
        self._ethics_vote = ethics_vote
        self._test_request = test_request
        self._creation_time = creation_time
        self._collections = collections
        self._query = query

    @classmethod
    def from_dict(cls, dikt) -> 'Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Request of this Request.  # noqa: E501
        :rtype: Request
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_id(self) -> int:
        """Gets the request_id of this Request.


        :return: The request_id of this Request.
        :rtype: int
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id: int):
        """Sets the request_id of this Request.


        :param request_id: The request_id of this Request.
        :type request_id: int
        """

        self._request_id = request_id

    @property
    def title(self) -> str:
        """Gets the title of this Request.


        :return: The title of this Request.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Request.


        :param title: The title of this Request.
        :type title: str
        """

        self._title = title

    @property
    def project_description(self) -> str:
        """Gets the project_description of this Request.


        :return: The project_description of this Request.
        :rtype: str
        """
        return self._project_description

    @project_description.setter
    def project_description(self, project_description: str):
        """Sets the project_description of this Request.


        :param project_description: The project_description of this Request.
        :type project_description: str
        """

        self._project_description = project_description

    @property
    def request_description(self) -> str:
        """Gets the request_description of this Request.


        :return: The request_description of this Request.
        :rtype: str
        """
        return self._request_description

    @request_description.setter
    def request_description(self, request_description: str):
        """Sets the request_description of this Request.


        :param request_description: The request_description of this Request.
        :type request_description: str
        """

        self._request_description = request_description

    @property
    def ethics_vote(self) -> str:
        """Gets the ethics_vote of this Request.


        :return: The ethics_vote of this Request.
        :rtype: str
        """
        return self._ethics_vote

    @ethics_vote.setter
    def ethics_vote(self, ethics_vote: str):
        """Sets the ethics_vote of this Request.


        :param ethics_vote: The ethics_vote of this Request.
        :type ethics_vote: str
        """

        self._ethics_vote = ethics_vote

    @property
    def test_request(self) -> bool:
        """Gets the test_request of this Request.


        :return: The test_request of this Request.
        :rtype: bool
        """
        return self._test_request

    @test_request.setter
    def test_request(self, test_request: bool):
        """Sets the test_request of this Request.


        :param test_request: The test_request of this Request.
        :type test_request: bool
        """

        self._test_request = test_request

    @property
    def creation_time(self) -> str:
        """Gets the creation_time of this Request.

        date/time when request was created  # noqa: E501

        :return: The creation_time of this Request.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time: str):
        """Sets the creation_time of this Request.

        date/time when request was created  # noqa: E501

        :param creation_time: The creation_time of this Request.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def collections(self) -> List[QueryCollections]:
        """Gets the collections of this Request.

        array of collection involved in the request (optional)  # noqa: E501

        :return: The collections of this Request.
        :rtype: List[QueryCollections]
        """
        return self._collections

    @collections.setter
    def collections(self, collections: List[QueryCollections]):
        """Sets the collections of this Request.

        array of collection involved in the request (optional)  # noqa: E501

        :param collections: The collections of this Request.
        :type collections: List[QueryCollections]
        """

        self._collections = collections

    @property
    def query(self) -> List[RequestQuery]:
        """Gets the query of this Request.


        :return: The query of this Request.
        :rtype: List[RequestQuery]
        """
        return self._query

    @query.setter
    def query(self, query: List[RequestQuery]):
        """Sets the query of this Request.


        :param query: The query of this Request.
        :type query: List[RequestQuery]
        """

        self._query = query
