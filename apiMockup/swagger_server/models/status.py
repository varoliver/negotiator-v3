# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
import re  # noqa: F401,E501
from swagger_server import util


class Status(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, biobanks: int=None, attachments: int=None, collections: int=None, queries_with_matches: int=None, build_time: str=None, used: int=None, free: int=None, queries: int=None, version: str=None, users: int=None):  # noqa: E501
        """Status - a model defined in Swagger

        :param biobanks: The biobanks of this Status.  # noqa: E501
        :type biobanks: int
        :param attachments: The attachments of this Status.  # noqa: E501
        :type attachments: int
        :param collections: The collections of this Status.  # noqa: E501
        :type collections: int
        :param queries_with_matches: The queries_with_matches of this Status.  # noqa: E501
        :type queries_with_matches: int
        :param build_time: The build_time of this Status.  # noqa: E501
        :type build_time: str
        :param used: The used of this Status.  # noqa: E501
        :type used: int
        :param free: The free of this Status.  # noqa: E501
        :type free: int
        :param queries: The queries of this Status.  # noqa: E501
        :type queries: int
        :param version: The version of this Status.  # noqa: E501
        :type version: str
        :param users: The users of this Status.  # noqa: E501
        :type users: int
        """
        self.swagger_types = {
            'biobanks': int,
            'attachments': int,
            'collections': int,
            'queries_with_matches': int,
            'build_time': str,
            'used': int,
            'free': int,
            'queries': int,
            'version': str,
            'users': int
        }

        self.attribute_map = {
            'biobanks': 'biobanks',
            'attachments': 'attachments',
            'collections': 'collections',
            'queries_with_matches': 'queriesWithMatches',
            'build_time': 'buildTime',
            'used': 'used',
            'free': 'free',
            'queries': 'queries',
            'version': 'version',
            'users': 'users'
        }
        self._biobanks = biobanks
        self._attachments = attachments
        self._collections = collections
        self._queries_with_matches = queries_with_matches
        self._build_time = build_time
        self._used = used
        self._free = free
        self._queries = queries
        self._version = version
        self._users = users

    @classmethod
    def from_dict(cls, dikt) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Status of this Status.  # noqa: E501
        :rtype: Status
        """
        return util.deserialize_model(dikt, cls)

    @property
    def biobanks(self) -> int:
        """Gets the biobanks of this Status.

        number of registered biobanks in the Negotiator instance  # noqa: E501

        :return: The biobanks of this Status.
        :rtype: int
        """
        return self._biobanks

    @biobanks.setter
    def biobanks(self, biobanks: int):
        """Sets the biobanks of this Status.

        number of registered biobanks in the Negotiator instance  # noqa: E501

        :param biobanks: The biobanks of this Status.
        :type biobanks: int
        """

        self._biobanks = biobanks

    @property
    def attachments(self) -> int:
        """Gets the attachments of this Status.

        number of attachments uploaded into the system  # noqa: E501

        :return: The attachments of this Status.
        :rtype: int
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments: int):
        """Sets the attachments of this Status.

        number of attachments uploaded into the system  # noqa: E501

        :param attachments: The attachments of this Status.
        :type attachments: int
        """

        self._attachments = attachments

    @property
    def collections(self) -> int:
        """Gets the collections of this Status.

        number of registered collections in the Negotiator instance  # noqa: E501

        :return: The collections of this Status.
        :rtype: int
        """
        return self._collections

    @collections.setter
    def collections(self, collections: int):
        """Sets the collections of this Status.

        number of registered collections in the Negotiator instance  # noqa: E501

        :param collections: The collections of this Status.
        :type collections: int
        """

        self._collections = collections

    @property
    def queries_with_matches(self) -> int:
        """Gets the queries_with_matches of this Status.

        number of queries with at least one matching collection  # noqa: E501

        :return: The queries_with_matches of this Status.
        :rtype: int
        """
        return self._queries_with_matches

    @queries_with_matches.setter
    def queries_with_matches(self, queries_with_matches: int):
        """Sets the queries_with_matches of this Status.

        number of queries with at least one matching collection  # noqa: E501

        :param queries_with_matches: The queries_with_matches of this Status.
        :type queries_with_matches: int
        """

        self._queries_with_matches = queries_with_matches

    @property
    def build_time(self) -> str:
        """Gets the build_time of this Status.

        date/time when current Negotiator version was built  # noqa: E501

        :return: The build_time of this Status.
        :rtype: str
        """
        return self._build_time

    @build_time.setter
    def build_time(self, build_time: str):
        """Sets the build_time of this Status.

        date/time when current Negotiator version was built  # noqa: E501

        :param build_time: The build_time of this Status.
        :type build_time: str
        """

        self._build_time = build_time

    @property
    def used(self) -> int:
        """Gets the used of this Status.

        used diskspace on the system  # noqa: E501

        :return: The used of this Status.
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used: int):
        """Sets the used of this Status.

        used diskspace on the system  # noqa: E501

        :param used: The used of this Status.
        :type used: int
        """

        self._used = used

    @property
    def free(self) -> int:
        """Gets the free of this Status.

        free diskspace on the system  # noqa: E501

        :return: The free of this Status.
        :rtype: int
        """
        return self._free

    @free.setter
    def free(self, free: int):
        """Sets the free of this Status.

        free diskspace on the system  # noqa: E501

        :param free: The free of this Status.
        :type free: int
        """

        self._free = free

    @property
    def queries(self) -> int:
        """Gets the queries of this Status.

        total number of queries registered in the Negotiator instance  # noqa: E501

        :return: The queries of this Status.
        :rtype: int
        """
        return self._queries

    @queries.setter
    def queries(self, queries: int):
        """Sets the queries of this Status.

        total number of queries registered in the Negotiator instance  # noqa: E501

        :param queries: The queries of this Status.
        :type queries: int
        """

        self._queries = queries

    @property
    def version(self) -> str:
        """Gets the version of this Status.

        version of the Negotiator instance  # noqa: E501

        :return: The version of this Status.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this Status.

        version of the Negotiator instance  # noqa: E501

        :param version: The version of this Status.
        :type version: str
        """

        self._version = version

    @property
    def users(self) -> int:
        """Gets the users of this Status.

        number of users registered  in the Negotiator instance  # noqa: E501

        :return: The users of this Status.
        :rtype: int
        """
        return self._users

    @users.setter
    def users(self, users: int):
        """Sets the users of this Status.

        number of users registered  in the Negotiator instance  # noqa: E501

        :param users: The users of this Status.
        :type users: int
        """

        self._users = users
