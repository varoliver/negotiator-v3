# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.collection import Collection  # noqa: F401,E501
from swagger_server import util


class Biobank(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, collections: List[Collection]=None):  # noqa: E501
        """Biobank - a model defined in Swagger

        :param id: The id of this Biobank.  # noqa: E501
        :type id: str
        :param name: The name of this Biobank.  # noqa: E501
        :type name: str
        :param collections: The collections of this Biobank.  # noqa: E501
        :type collections: List[Collection]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'collections': List[Collection]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'collections': 'collections'
        }
        self._id = id
        self._name = name
        self._collections = collections

    @classmethod
    def from_dict(cls, dikt) -> 'Biobank':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Biobank of this Biobank.  # noqa: E501
        :rtype: Biobank
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Biobank.

        Id of the biobank in the datasource  # noqa: E501

        :return: The id of this Biobank.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Biobank.

        Id of the biobank in the datasource  # noqa: E501

        :param id: The id of this Biobank.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Biobank.

        Name of the biobank in the data source  # noqa: E501

        :return: The name of this Biobank.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Biobank.

        Name of the biobank in the data source  # noqa: E501

        :param name: The name of this Biobank.
        :type name: str
        """

        self._name = name

    @property
    def collections(self) -> List[Collection]:
        """Gets the collections of this Biobank.


        :return: The collections of this Biobank.
        :rtype: List[Collection]
        """
        return self._collections

    @collections.setter
    def collections(self, collections: List[Collection]):
        """Sets the collections of this Biobank.


        :param collections: The collections of this Biobank.
        :type collections: List[Collection]
        """

        self._collections = collections
